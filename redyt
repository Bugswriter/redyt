#!/bin/sh

# Check if necessary programs are installed
for prog in jq curl; do
	[[ ! "$(command -v "$prog")" ]] && echo "Please install $prog!" && exit 1
done

[[ $(command -v sxiv) ]] && viewer="sxiv"
[[ ! $viewer && $(command -v feh) ]] && viewer="feh"

[[ $(command -v dmenu) ]] && selector="dmenu"
[[ !  $selector && $(command -v rofi) ]] && selector="rofi"
[[ !  $selector && $(command -v fzf) ]] && selector="fzf"

[[ ! ${viewer} ]] && echo "Please install sxiv or feh!" && exit 1
[[ ! ${selector} ]] && echo "Please install dmenu or rofi or fzf!" && exit 1

# If notify-send is not installed, use echo as notifier
[[ ! $(command -v notify-send) ]] && notifier="echo" || notifier="notify-send"
[[ ! $(command -v wget) ]] && downloader="curl" || downloader="wget"

[[ ${viewer} == "sxiv" ]] && viewer_opts="-a -s f" || viewer_opts="-.ZdB black"
selector_opts=" "
[[ ${selector} == "dmenu" ]] && selector_opts="-P" || selector_opts="-dmenu"
[[ ${downloader} == "curl" ]] && downloader_opts="-Os" || downloader_opts=" "

# args
while [[ $# -gt 0 ]]; do
	case $1 in
		-l|--limit)
			shift
			LIMIT=$1
			case $LIMIT in
				''|*[!0-9]*)
					echo 'limit is NaN'
					exit 1
			esac
			;;
		-f|--filter)
			FILTER=1
			;;
		-k|--keep)
			KEEP=1
			;;
		-v|--verbose)
			VERBOSE=1
			;;
		-s|--sort)
			shift
			SORT=$1
			;;
		*)
			subreddit=$1
			;;
	esac
	shift
done


[[ $FILTER -eq 1 && ${viewer} == "sxiv" ]] && viewer_opts="-o $viewer_opts"
# Default config directory
configdir="${XDG_CONFIG_HOME:-$HOME/.config}/redyt"

# Create .config/redyt if it does not exist to prevent
# the program from not functioning properly
[[ ! -d "$configdir" ]] && echo "Directory $configdir does not exist, creating..." && mkdir -p "$configdir"

# Default subreddit that will be inserted in "subreddit.txt"
# if it does not exist
defaultsub="linuxmemes"

# If subreddit.txt does not exist, create it to prevent
# the program from not functioning properly
[[ ! -f "$configdir/subreddit.txt" ]] && echo "$defaultsub" >> "$configdir/subreddit.txt"

# If no argument is passed
if [[ -z "$subreddit" ]]; then
	# Ask the user to enter a subreddit
	subreddit=$("$selector" "$selector_opts" "Select Subreddit r/" -i -l 10 < "$configdir/subreddit.txt" | cut -d\| -f1 | awk '{$1=$1;print}')

	# If no subreddit was chosen, exit
	[[ -z "$subreddit" ]] && echo "no sub chosen" && exit 1
fi

# Default directory used to store the feed file and fetched images
cachedir="/tmp/redyt"

# If cachedir does not exist, create it
if [[ ! -d "$cachedir" ]]; then
	echo "$cachedir does not exist, creating..."
	mkdir -p "$cachedir"
fi

# Send a notification
[[ $VERBOSE -eq 1 ]] && $notifier "Redyt" "📩 Downloading your 🖼️ Memes"

# Download the subreddit feed, containing only the
# first 100 entries (limit), and store it inside
# cachedir/tmp.json
curl -sH "User-agent: 'your bot 0.1'" "https://www.reddit.com/r/$subreddit/${SORT:-hot}.json?limit=${LIMIT:-100}" > "$cachedir/tmp.json"

# Create a list of images
imgs=$(jq '.' < "$cachedir/tmp.json" | grep url_overridden_by_dest | grep -Eo "http(s|)://.*(jpg|png)\b" | sort -u)

# If there are no images, exit
[[ -z "$imgs" ]] && $notifier "Redyt" "sadly, there are no images for subreddit $subreddit, please try again later!" && exit 1

# Download images to $cachedir
cd $cachedir
for img in $imgs; do
	if [[ ! -e "$cachedir/${img##*/}" ]]; then
		$downloader $downloader_opts $img &
	fi
done
wait

# Send a notification
[[ $VERBOSE -eq 1 ]] && $notifier  "Redyt" "👍 Download Finished, Enjoy! 😊"
rm "$cachedir/tmp.json"

# Display the images
$viewer $viewer_opts $cachedir/*.png $cachedir/*.jpg

# Once finished, remove all of the cached images
[[ ! $KEEP -eq 1 ]] && rm "${cachedir:?}"/*
